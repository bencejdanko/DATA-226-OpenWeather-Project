from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

from sqlalchemy import create_engine
from snowflake.sqlalchemy import URL
from sqlalchemy import Table, Column, Integer, String, DateTime, MetaData, Float

from datetime import timedelta
from datetime import datetime
import requests
import logging

# Initialize the logger
logger = logging.getLogger(__name__)

def return_snowflake_conn():

    # Initialize the SnowflakeHook
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')
    
    # Execute the query and fetch results
    conn = hook.get_conn()
    return conn.cursor()


def create_table(table, cur):
  try:
    cur.execute(f"""
    create or replace table {table} (
      id INT AUTOINCREMENT PRIMARY KEY,
      symbol string,
      date date,
      open float,
      high float,
      low float,
      close float,
      volume float
    );
    """)
  except Exception as e:
    logger.error(f"Error creating table: {e}")
    raise Exception("Error creating table")
